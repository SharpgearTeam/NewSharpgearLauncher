AudioWorkletProcessor.prototype._v=function(){this._w=true;this.port.onmessage=(_x)=>{if(_x.data==="kill")this._w=false;};};class _y extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._v();}process(_z,_A,parameters){const input=_z[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _B=input[c];for(let _C=0;_C<_B.length;++_C){const _D=(bypass[_C]!==undefined)?bypass[_C]:bypass[0];
_A[_D][c][_C]=_B[_C];}}return this._w;}}class _E extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._v();}process(_z,_A,parameters){const _F=_z[0];const _G=_z[1];const output=_A[0];const gain=parameters.gain;for(let c=0;c<_G.length;++c){const _B=_G[c];const _H=output[c];for(let _C=0;_C<_B.length;++_C)_H[_C]=_B[_C];}for(let c=0;c<_F.length;++c){const _B=_F[c];const _H=output[c];for(let _C=0;_C<_B.length;
++_C){const _I=(gain[_C]!==undefined)?gain[_C]:gain[0];_H[_C]+=_B[_C]*_I;}}return this._w;}}registerProcessor("audio-bus-input",_y);registerProcessor("audio-bus-output",_E);class _J extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100},{name:"resolution",automationRate:"a-rate",
defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _K=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_L){super();this._v();const _M=_L.outputChannelCount[0];this._N=new Float32Array(_M);this._O=new Uint32Array(_M);}process(_z,_A,parameters){const input=_z[0];const output=_A[0];const bypass=parameters.bypass;const gain=parameters.gain;const factor=parameters.factor;const resolution=parameters.resolution;
const mix=parameters.mix;for(let c=0;c<input.length;++c){const _B=input[c];const _H=output[c];for(let _C=0;_C<_B.length;++_C){_H[_C]=_B[_C];if(this._O[c]===0)this._N[c]=_B[_C];const _P=(factor[_C]!==undefined)?factor[_C]:factor[0];++this._O[c];this._O[c]%=_P;const _D=(bypass[_C]!==undefined)?bypass[_C]:bypass[0];if(_D>0.0){continue;}let _Q=this._N[c];const _I=(gain[_C]!==undefined)?gain[_C]:gain[0];_Q*=_I;_Q=Math.max(Math.min(_Q,1.0),-1.0);const _R=(resolution[_C]!==undefined)?resolution[_C]:resolution[0];
const max=(_Q>0.0)?_J._K[_R]-1:_J._K[_R];_Q=Math.round(_Q*max)/max;const _S=(mix[_C]!==undefined)?mix[_C]:mix[0];_H[_C]*=(1.0-_S);_H[_C]+=(_Q*_S);}}return this._w;}}registerProcessor("bitcrusher-processor",_J);class _T{constructor(_U=1e-3){this.setTime(_U);}setTime(_U){this._V=Math.exp(-1/(_U*sampleRate));}process(_W,_X){return _W+this._V*(_X-_W);}}class _Y{constructor(_Z,__){this._01=new _T(_Z);this._11=new _T(__);this._21=_Z;this._31=__;}_41(_U){if(_U===this._21)return;this._01.setTime(_U);this._21=_U;
}_51(_U){if(_U===this._31)return;this._11.setTime(_U);this._31=_U;}process(_W,_X){if(_W>_X)return this._01.process(_W,_X);else return this._11.process(_W,_X);}}class _61 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0},{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",
defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_71){super();this._v();const _01=_61.parameterDescriptors.find(_81=>_81.name==="attack");const _11=_61.parameterDescriptors.find(_81=>_81.name==="release");this._91=new _Y(_01.defaultValue,_11.defaultValue);this._a1=0;}process(_b1,
_c1,_d1){const input=_b1[0];const output=_c1[0];const bypass=_d1.bypass;const ingain=_d1.ingain;const outgain=_d1.outgain;const threshold=_d1.threshold;const ratio=_d1.ratio;const attack=_d1.attack;const release=_d1.release;if(input.length===0)return this._w;for(let _C=0;_C<input[0].length;++_C){let frame=input.map(_e1=>_e1[_C]);output.forEach((_e1,_f1)=>{_e1[_C]=frame[_f1];});const _g1=(ingain[_C]!==undefined)?ingain[_C]:ingain[0];frame=frame.map(_h1=>_h1*=_g1);const rect=frame.map(_h1=>Math.abs(_h1));const max=Math.max(...rect);
const _i1=_j1(max);const _k1=(threshold[_C]!==undefined)?threshold[_C]:threshold[0];const _l1=_j1(_k1);const _m1=Math.max(0,_i1-_l1);const _01=(attack[_C]!==undefined)?attack[_C]:attack[0];const _11=(release[_C]!==undefined)?release[_C]:release[0];this._91._41(_01);this._91._51(_11);this._a1=this._91.process(_m1,this._a1);const _D=(bypass[_C]!==undefined)?bypass[_C]:bypass[0];if(_D>0)continue;const _R=(ratio[_C]!==undefined)?ratio[_C]:ratio[0];const _n1=(this._a1/_R)-this._a1;const _I=_o1(_n1);frame=frame.map(_h1=>_h1*=_I);
const _p1=(outgain[_C]!==undefined)?outgain[_C]:outgain[0];frame=frame.map(_h1=>_h1*=_p1);output.forEach((_e1,_f1)=>{_e1[_C]=frame[_f1];});}return this._w;}}function _j1(_q1){return 20*Math.log10(_q1);}function _o1(_q1){return Math.pow(10,_q1/20);}registerProcessor("compressor-processor",_61);class _r1 extends AudioWorkletProcessor{static _s1=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,
minValue:0.0,maxValue:_r1._s1},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_L){super();this._v();const _M=_L.outputChannelCount[0];const _t1=(_r1._s1*sampleRate)+1;this.buffer=new Array(_M);this._u1=new Uint32Array(_M);for(let c=0;c<_M;++c)this.buffer[c]=new Float32Array(_t1);}process(_z,_A,parameters){const input=_z[0];const output=_A[0];const bypass=parameters.bypass;const time=parameters.time;
const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _B=input[c];const _H=output[c];for(let _C=0;_C<_B.length;++_C){_H[_C]=_B[_C];const _k1=(time[_C]!==undefined)?time[_C]:time[0];const _v1=this._w1(c,_k1);const _P=(feedback[_C]!==undefined)?feedback[_C]:feedback[0];const _x1=_B[_C]+(_v1*_P);this.write(c,_x1);const _D=(bypass[_C]!==undefined)?bypass[_C]:bypass[0];if(_D>0.0){continue;}const _S=(mix[_C]!==undefined)?mix[_C]:mix[0];_H[_C]*=(1-_S);_H[_C]+=(_v1*_S);}}
return this._w;}_w1(_y1,_U){const _z1=_U*sampleRate;let _A1=(this._u1[_y1]-~~_z1);let _B1=(_A1-1);while(_A1<0)_A1+=this.buffer[_y1].length;while(_B1<0)_B1+=this.buffer[_y1].length;const frac=_z1-~~_z1;const _C1=this.buffer[_y1][_A1];const _D1=this.buffer[_y1][_B1];return _C1+(_D1-_C1)*frac;}write(_y1,_E1){++this._u1[_y1];this._u1[_y1]%=this.buffer[_y1].length;this.buffer[_y1][this._u1[_y1]]=_E1;}}registerProcessor("delay-processor",_r1);class _F1 extends AudioWorkletProcessor{static get parameterDescriptors(){
return [];}constructor(){super();this._v();}process(_G1,_H1,_I1){const input=_G1[0];const _J1=_H1[0];const _K1=_H1[1];for(let c=0;c<input.length;++c){const _B=input[c];const _L1=_J1[c];const _M1=_K1[c];for(let _C=0;_C<_B.length;++_C){_L1[_C]=_B[_C];_M1[_C]=_B[_C];}}return this._w;}}class _N1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._v();}process(_G1,_H1,_I1){const _F=_G1[0];const _G=_G1[1];
const output=_H1[0];const bypass=_I1.bypass;for(let c=0;c<_G.length;++c){const _O1=_F[c];const _P1=_G[c];const _H=output[c];for(let _C=0;_C<_O1.length;++_C){const _D=(bypass[_C]!==undefined)?bypass[_C]:bypass[0];if(_D>0){_H[_C]=_P1[_C];}else {_H[_C]=_O1[_C];}}}return this._w;}}registerProcessor("eq-input",_F1);registerProcessor("eq-output",_N1);class _Q1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",
automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._v();}process(_z,_A,parameters){const input=_z[0];const output=_A[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _B=input[c];const _H=output[c];for(let _C=0;_C<_B.length;++_C){_H[_C]=_B[_C];const _D=(bypass[_C]!==undefined)?bypass[_C]:bypass[0];if(_D>0.0){continue;}const _I=(gain[_C]!==undefined)?gain[_C]:gain[0];_H[_C]*=_I;}}return this._w;}}registerProcessor("gain-processor",
_Q1);class _R1 extends AudioWorkletProcessor{static get parameterDescriptors(){const _S1=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_S1),minValue:10.0,maxValue:_S1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_L){super();this._v();const _M=_L.outputChannelCount[0];
this._T1=0;this._U1=0;this._V1=0;this._W1=0;this._X1=0;this._Y1=new Float32Array(_M);this._Z1=new Float32Array(_M);this.__1=new Float32Array(_M);this._02=new Float32Array(_M);this._12=-1;this._22=-1;this._32=-1;}process(_z,_A,parameters){const input=_z[0];const output=_A[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _42=(freq.length===1&&q.length===1&&gain.length===1);if(_42)this._52(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _B=input[c];
const _H=output[c];for(let _C=0;_C<_B.length;++_C){if(_42===false){const _P=(freq[_C]!==undefined)?freq[_C]:freq[0];const _62=(q[_C]!==undefined)?q[_C]:q[0];const _I=(gain[_C]!==undefined)?gain[_C]:gain[0];this._52(_P,_62,_I);}const _72=this._V1*_B[_C]+this._W1*this._Y1[c]+this._X1*this._Z1[c]-this._T1*this.__1[c]-this._U1*this._02[c];this._Z1[c]=this._Y1[c];this._Y1[c]=_B[_C];this._02[c]=this.__1[c];this.__1[c]=_72;const _D=(bypass[_C]!==undefined)?bypass[_C]:bypass[0];_H[_C]=(_D>0)?_B[_C]:_72;}}return this._w;
}_52(_82,_92,_a2){if(_82===this._12&&_92===this._22&&_a2===this._32)return;const _b2=2*Math.PI*_82/sampleRate;const _c2=Math.cos(_b2);const _d2=Math.sqrt(_a2);const _e2=_d2+1;const _f2=_d2-1;const _g2=_e2*_c2;const _h2=_f2*_c2;const _i2=_e2-_h2;const _j2=_e2+_h2;const alpha=Math.sin(_b2)/(2*_92);const _k2=(2*Math.sqrt(_d2)*alpha);const _l2=_i2+_k2;const _T1=2*(_f2-_g2);const _U1=_i2-_k2;const _V1=_d2*(_j2+_k2);const _W1=-2*_d2*(_f2+_g2);const _X1=_d2*(_j2-_k2);this._T1=_T1/_l2;this._U1=_U1/_l2;this._V1=_V1/_l2;this._W1=_W1/_l2;
this._X1=_X1/_l2;this._12=_82;this._22=_92;this._32=_a2;}}registerProcessor("hi-shelf-processor",_R1);class _m2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _n2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,_n2),minValue:10.0,maxValue:_n2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_L){super();this._v();const _M=_L.outputChannelCount[0];
this._T1=0;this._U1=0;this._V1=0;this._W1=0;this._X1=0;this._Y1=new Float32Array(_M);this._Z1=new Float32Array(_M);this.__1=new Float32Array(_M);this._02=new Float32Array(_M);this._o2=-1;this._22=-1;}process(_z,_A,parameters){const input=_z[0];const output=_A[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _42=(cutoff.length===1&&q.length===1);if(_42)this._52(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _B=input[c];const _H=output[c];for(let _C=0;_C<_B.length;
++_C){if(_42===false){const c=(cutoff[_C]!==undefined)?cutoff[_C]:cutoff[0];const _62=(q[_C]!==undefined)?q[_C]:q[0];this._52(c,_62);}const _72=this._V1*_B[_C]+this._W1*this._Y1[c]+this._X1*this._Z1[c]-this._T1*this.__1[c]-this._U1*this._02[c];this._Z1[c]=this._Y1[c];this._Y1[c]=_B[_C];this._02[c]=this.__1[c];this.__1[c]=_72;const _D=(bypass[_C]!==undefined)?bypass[_C]:bypass[0];_H[_C]=(_D>0)?_B[_C]:_72;}}return this._w;}_52(_p2,_92){if(_p2===this._o2&&_92===this._22)return;const _b2=2*Math.PI*_p2/sampleRate;
const alpha=Math.sin(_b2)/(2*_92);const _c2=Math.cos(_b2);const _l2=1+alpha;const _T1=-2*_c2;const _U1=1-alpha;const _V1=(1+_c2)/2;const _W1=-1-_c2;const _X1=(1+_c2)/2;this._T1=_T1/_l2;this._U1=_U1/_l2;this._V1=_V1/_l2;this._W1=_W1/_l2;this._X1=_X1/_l2;this._o2=_p2;this._22=_92;}}registerProcessor("hpf2-processor",_m2);class _q2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _S1=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",
automationRate:"a-rate",defaultValue:Math.min(500.0,_S1),minValue:10.0,maxValue:_S1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_L){super();this._v();const _M=_L.outputChannelCount[0];this._T1=0;this._U1=0;this._V1=0;this._W1=0;this._X1=0;this._Y1=new Float32Array(_M);this._Z1=new Float32Array(_M);this.__1=new Float32Array(_M);this._02=new Float32Array(_M);this._12=-1;this._22=-1;this._32=-1;
}process(_z,_A,parameters){const input=_z[0];const output=_A[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _42=(freq.length===1&&q.length===1&&gain.length===1);if(_42)this._52(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _B=input[c];const _H=output[c];for(let _C=0;_C<_B.length;++_C){if(_42===false){const _P=(freq[_C]!==undefined)?freq[_C]:freq[0];const _62=(q[_C]!==undefined)?q[_C]:q[0];const _I=(gain[_C]!==undefined)?gain[_C]:gain[0];
this._52(_P,_62,_I);}const _72=this._V1*_B[_C]+this._W1*this._Y1[c]+this._X1*this._Z1[c]-this._T1*this.__1[c]-this._U1*this._02[c];this._Z1[c]=this._Y1[c];this._Y1[c]=_B[_C];this._02[c]=this.__1[c];this.__1[c]=_72;const _D=(bypass[_C]!==undefined)?bypass[_C]:bypass[0];_H[_C]=(_D>0)?_B[_C]:_72;}}return this._w;}_52(_82,_92,_a2){if(_82===this._12&&_92===this._22&&_a2===this._32)return;const _b2=2*Math.PI*_82/sampleRate;const _c2=Math.cos(_b2);const _d2=Math.sqrt(_a2);const _e2=_d2+1;const _f2=_d2-1;const _g2=_e2*_c2;
const _h2=_f2*_c2;const _i2=_e2-_h2;const _j2=_e2+_h2;const alpha=Math.sin(_b2)/(2*_92);const _k2=(2*Math.sqrt(_d2)*alpha);const _l2=_j2+_k2;const _T1=-2*(_f2+_g2);const _U1=_j2-_k2;const _V1=_d2*(_i2+_k2);const _W1=2*_d2*(_f2-_g2);const _X1=_d2*(_i2-_k2);this._T1=_T1/_l2;this._U1=_U1/_l2;this._V1=_V1/_l2;this._W1=_W1/_l2;this._X1=_X1/_l2;this._12=_82;this._22=_92;this._32=_a2;}}registerProcessor("lo-shelf-processor",_q2);class _r2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _n2=sampleRate*0.45;
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_n2),minValue:10.0,maxValue:_n2},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_L){super();this._v();const _M=_L.outputChannelCount[0];this._T1=0;this._U1=0;this._V1=0;this._W1=0;this._X1=0;this._Y1=new Float32Array(_M);this._Z1=new Float32Array(_M);this.__1=new Float32Array(_M);this._02=new Float32Array(_M);
this._o2=-1;this._22=-1;}process(_z,_A,parameters){const input=_z[0];const output=_A[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _42=(cutoff.length===1&&q.length===1);if(_42)this._52(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _B=input[c];const _H=output[c];for(let _C=0;_C<_B.length;++_C){if(_42===false){const c=(cutoff[_C]!==undefined)?cutoff[_C]:cutoff[0];const _62=(q[_C]!==undefined)?q[_C]:q[0];this._52(c,_62);}const _72=this._V1*_B[_C]+this._W1*this._Y1[c]+this._X1*this._Z1[c]-this._T1*this.__1[c]-this._U1*this._02[c];
this._Z1[c]=this._Y1[c];this._Y1[c]=_B[_C];this._02[c]=this.__1[c];this.__1[c]=_72;const _D=(bypass[_C]!==undefined)?bypass[_C]:bypass[0];_H[_C]=(_D>0)?_B[_C]:_72;}}return this._w;}_52(_p2,_92){if(_p2===this._o2&&_92===this._22)return;const _b2=2*Math.PI*_p2/sampleRate;const alpha=Math.sin(_b2)/(2*_92);const _c2=Math.cos(_b2);const _l2=1+alpha;const _T1=-2*_c2;const _U1=1-alpha;const _V1=(1-_c2)/2;const _W1=1-_c2;const _X1=(1-_c2)/2;this._T1=_T1/_l2;this._U1=_U1/_l2;this._V1=_V1/_l2;this._W1=_W1/_l2;this._X1=_X1/_l2;
this._o2=_p2;this._22=_92;}}registerProcessor("lpf2-processor",_r2);class _s2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _S1=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_S1),minValue:10.0,maxValue:_S1},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_L){
super();this._v();const _M=_L.outputChannelCount[0];this._T1=0;this._U1=0;this._V1=0;this._W1=0;this._X1=0;this._Y1=new Float32Array(_M);this._Z1=new Float32Array(_M);this.__1=new Float32Array(_M);this._02=new Float32Array(_M);this._12=-1;this._22=-1;this._32=-1;}process(_z,_A,parameters){const input=_z[0];const output=_A[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _42=(freq.length===1&&q.length===1&&gain.length===1);if(_42)this._52(freq[0],
q[0],gain[0]);for(let c=0;c<input.length;++c){const _B=input[c];const _H=output[c];for(let _C=0;_C<_B.length;++_C){if(_42===false){const _P=(freq[_C]!==undefined)?freq[_C]:freq[0];const _62=(q[_C]!==undefined)?q[_C]:q[0];const _I=(gain[_C]!==undefined)?gain[_C]:gain[0];this._52(_P,_62,_I);}const _72=this._V1*_B[_C]+this._W1*this._Y1[c]+this._X1*this._Z1[c]-this._T1*this.__1[c]-this._U1*this._02[c];this._Z1[c]=this._Y1[c];this._Y1[c]=_B[_C];this._02[c]=this.__1[c];this.__1[c]=_72;const _D=(bypass[_C]!==undefined)?bypass[_C]:bypass[0];
_H[_C]=(_D>0)?_B[_C]:_72;}}return this._w;}_52(_82,_92,_a2){if(_82===this._12&&_92===this._22&&_a2===this._32)return;const _b2=2*Math.PI*_82/sampleRate;const _c2=Math.cos(_b2);const _d2=Math.sqrt(_a2);const alpha=Math.sin(_b2)/(2*_92);const _t2=alpha/_d2;const _u2=alpha*_d2;const _l2=1+_t2;const _T1=-2*_c2;const _U1=1-_t2;const _V1=1+_u2;const _W1=_T1;const _X1=1-_u2;this._T1=_T1/_l2;this._U1=_U1/_l2;this._V1=_V1/_l2;this._W1=_W1/_l2;this._X1=_X1/_l2;this._12=_82;this._22=_92;this._32=_a2;}}registerProcessor("peak-eq-processor",
_s2);class _v2{constructor(_w2){this._x2=0;this._y2=0;this.feedback=0;this._z2=0;this.buffer=new Float32Array(_w2);this._A2=0;}process(_E1){const out=this.buffer[this._A2];this._z2=(this._z2*this._x2)+(out*this._y2);this.buffer[this._A2]=_E1+(this._z2*this.feedback);++this._A2;this._A2%=this.buffer.length;return out;}_B2(_C2){this.feedback=Math.min(Math.max(0,_C2),1);}_D2(_E2){this._x2=Math.min(Math.max(0,_E2),1);this._y2=1-this._x2;}}class _F2{constructor(_w2){this.feedback=0;this.buffer=new Float32Array(_w2);
this._A2=0;}process(_E1){const out=this.buffer[this._A2];this.buffer[this._A2]=_E1+(out*this.feedback);++this._A2;this._A2%=this.buffer.length;return(out-_E1);}_B2(_C2){this.feedback=Math.min(Math.max(0,_C2),1);}}class _G2 extends AudioWorkletProcessor{static _H2=8;static _I2=4;static _J2=0.015;static _K2=0.4;static _L2=0.28;static _M2=0.7;static _N2=[1116,1188,1277,1356,1422,1491,1557,1617];static _O2=[1139,1211,1300,1379,1445,1514,1580,1640];static _P2=[556,441,341,225];static _Q2=[579,464,364,248];static get parameterDescriptors(){
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_L){super();this._v();const _M=_L.outputChannelCount[0];this._R2=-1;this._S2=-1;this._T2=new Array(_M);this._U2=new Array(_M);const _V2=[_G2._N2,_G2._O2];const _W2=[_G2._P2,
_G2._Q2];for(let c=0;c<_M;++c){this._T2[c]=new Array(_G2._H2);this._U2[c]=new Array(_G2._I2);for(let i=0;i<_G2._H2;++i)this._T2[c][i]=new _v2(_V2[c%_V2.length][i]);for(let i=0;i<_G2._I2;++i)this._U2[c][i]=new _F2(_W2[c%_W2.length][i]);}this._X2(0.5);this._D2(0.5);for(let c=0;c<_M;++c)for(let i=0;i<_G2._I2;++i)this._U2[c][i]._B2(0.5);}process(_z,_A,parameters){const input=_z[0];const output=_A[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;
c<input.length;++c){const _B=input[c];const _H=output[c];for(let _Y2=0;_Y2<_B.length;++_Y2){const _C=(size[_Y2]!==undefined)?size[_Y2]:size[0];const _Z2=(damp[_Y2]!==undefined)?damp[_Y2]:damp[0];this._X2(_C);this._D2(_Z2);_H[_Y2]=_B[_Y2];let out=0;const _Q=_B[_Y2]*_G2._J2;for(let i=0;i<_G2._H2;++i)out+=this._T2[c][i].process(_Q);for(let i=0;i<_G2._I2;++i)out=this._U2[c][i].process(out);const _D=(bypass[_Y2]!==undefined)?bypass[_Y2]:bypass[0];if(_D>0.0){continue;}const _S=(mix[_Y2]!==undefined)?mix[_Y2]:mix[0];
_H[_Y2]*=(1-_S);_H[_Y2]+=(out*_S);}}return this._w;}_X2(_w2){if(_w2===this._R2)return;const size=(_w2*_G2._L2)+_G2._M2;for(let c=0;c<this._T2.length;++c)for(let i=0;i<_G2._H2;++i)this._T2[c][i]._B2(size);this._R2=_w2;}_D2(_E2){if(_E2===this._S2)return;const damp=_E2*_G2._K2;for(let c=0;c<this._T2.length;++c)for(let i=0;i<_G2._H2;++i)this._T2[c][i]._D2(damp);this._S2=_E2;}}registerProcessor("reverb1-processor",_G2);class __2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",
automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_L){super();this._v();const _M=_L.outputChannelCount[0];this._03=new Array(_M).fill(1.0);this._13=new Array(_M).fill(0.0);
this._23=new Array(_M).fill(_33._43._53);this._63=new Array(_M);for(let c=0;c<_M;++c){this._63[c]=new _73();this._63[c]._83(sampleRate);this._63[c]._93(this._03[c]);this._63[c]._a3(this._23[c]);if(c%2===1){this._63[c]._b3(this._13[c]);}}}process(_z,_A,parameters){const input=_z[0];const output=_A[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _B=input[c];const _H=output[c];
for(let _C=0;_C<_B.length;++_C){_H[_C]=_B[_C];const _R=(rate[_C]!==undefined)?rate[_C]:rate[0];const _c3=(offset[_C]!==undefined)?offset[_C]:offset[0];const _d3=(shape[_C]!==undefined)?shape[_C]:shape[0];this._e3(c,_R,_c3,_d3);const _f3=this._63[c]._w1();const _D=(bypass[_C]!==undefined)?bypass[_C]:bypass[0];if(_D>0.0){continue;}const i=(intensity[_C]!==undefined)?intensity[_C]:intensity[0];const out=_B[_C]*_f3*i;_H[_C]*=(1.0-i);_H[_C]+=out;}}return this._w;}_e3(_y1,_g3,_h3,_i3){if(_g3!==this._03[_y1]){this._63[_y1]._93(_g3);
this._03[_y1]=_g3;}if(_h3!==this._13[_y1]){if(_y1%2===1){this._63[_y1]._b3(_h3);}this._13[_y1]=_h3;}if(_i3!==this._23[_y1]){this._63[_y1]._a3(_i3);this._23[_y1]=_i3;}}}registerProcessor("tremolo-processor",__2);function _33(){}_33._43={_53:0,_j3:1,_k3:2,_l3:3,_m3:4,_n3:5};_33._o3=function(_p3){return 1.0-_p3;};_33._q3=function(_p3){return _p3;};_33._r3=function(_p3){return 0.5*(Math.sin((_p3*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_33._s3=function(_p3){if(_p3<0.5){return 0.0;}return 1.0;};_33._t3=function(_p3){
if(_p3<0.5){return 2.0*_p3;}return 2.0-(2.0*_p3);};_33._u3=[_33._o3,_33._q3,_33._r3,_33._s3,_33._t3];_v3._w3=512;_v3._x3=1.0/_v3._w3;function _v3(_y3){this.data=new Float32Array(_v3._w3);for(let i=0;i<_v3._w3;++i){this.data[i]=_y3(i*_v3._x3);}}_v3.prototype._w1=function(_p3){_p3=Math.max(0.0,_p3);_p3=Math.min(_p3,1.0);const _z3=_p3*_v3._w3;const _A3=~~_z3;const _B3=_z3-_A3;let _A1=_A3;let _B1=_A1+1;if(_A1>=_v3._w3){_A1-=_v3._w3;}if(_B1>=_v3._w3){_B1-=_v3._w3;}const _C1=this.data[_A1];const _D1=this.data[_B1];
return _C1+(_D1-_C1)*_B3;};_73._C3=[];_73._D3=false;_73._E3=0.0;_73._S1=20.0;function _73(){this._F3=48000;this.shape=_33._43._k3;this.freq=1.0;this._G3=0.0;this._x3=0.0;this._H3=0.0;if(_73._D3==true){return;}for(let i=0;i<_33._43._n3;++i){_73._C3[i]=new _v3(_33._u3[i]);}_73._D3=true;}_73._I3=function(){return(_73._D3==true);};_73.prototype._83=function(_J3){this._F3=_J3;this._K3();};_73.prototype._93=function(_82){_82=Math.max(_73._E3,_82);_82=Math.min(_82,_73._S1);this.freq=_82;this._K3();};_73.prototype._b3=function(_h3){
_h3=Math.max(0.0,_h3);_h3=Math.min(_h3,1.0);const _L3=_h3-this._H3;this._H3=_h3;this._G3+=_L3;while(this._G3>=1.0){this._G3-=1.0;}while(this._G3<0.0){this._G3+=1.0;}};_73.prototype._a3=function(_i3){_i3=Math.max(0,_i3);_i3=Math.min(_i3,_33._43._n3-1);this.shape=_i3;};_73.prototype._w1=function(){const result=_73._C3[this.shape]._w1(this._G3);this._G3+=this._x3;while(this._G3>=1.0){this._G3-=1.0;}return result;};_73.prototype._K3=function(){this._x3=this.freq/this._F3;};